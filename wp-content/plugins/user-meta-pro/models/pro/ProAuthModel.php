<?php
namespace UserMeta;class ProAuthModel{function generateCustomNonce($boo___________2,$iHH______k){return md5(str_replace('0','',md5(md5($boo___________2).md5('mcrypt_encrypt').md5($iHH______k))));}private function generateValidationKey($gcc_______4){$aWW___________f=self::generateProKey($gcc_______4,'validated');return $aWW___________f;}function generateProKey($boo___________2,$iHH______k){if(function_exists('mcrypt_encrypt')){return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256,md5(md5(md5($boo___________2))),$iHH______k,MCRYPT_MODE_CBC,md5(md5($boo___________2))));}else{return self::generateCustomNonce($boo___________2,$iHH______k);}}private function xmlRpcValidation($gcc_______4,$hoo___________N,$uhh_____________H){global $userMeta;include_once(ABSPATH.WPINC.'/class-IXR.php');$pAA_______________Z=new \IXR_Client($userMeta->website.'/xmlrpc.php');if(!$pAA_______________Z->query('ump.checkUserAuth',$gcc_______4,$hoo___________N,network_site_url(),$userMeta->version,$uhh_____________H,is_multisite())){$aNN________H='Something went wrong'.' - '.$pAA_______________Z->getErrorCode().' : '.$pAA_______________Z->getErrorMessage().'. Click <a href="http://user-meta.com/activation/">here</a> for alternative method.';$aNN________H=new \WP_Error('error',$aNN________H);}else{$aNN________H=$pAA_______________Z->getResponse();$aNN________H=is_array($aNN________H)?$aNN________H:new \WP_Error('error',$aNN________H);}return $aNN________H;}function remoteValidationPro($sgg_________D){global $userMeta;$mjj__________________O=@$sgg_________D[0];$hoo___________N=@$sgg_________D[1];$yjj_____________H=@$sgg_________D[2];$kEE_______V=get_user_by('login',$mjj__________________O);if($kEE_______V===false){new \WP_Error("not_user","Username: $mjj__________________O is not exists");}if(!is_super_admin($kEE_______V->ID)){if(is_multisite()){return new \WP_Error("not_admin","Username: $mjj__________________O is not a super admin account for network");}else{return new \WP_Error("not_admin","Username: $mjj__________________O is not an admin account");}}$kEE_______V=wp_authenticate($mjj__________________O,$hoo___________N);if(is_wp_error($kEE_______V)){return $kEE_______V;}if(empty($yjj_____________H['status'])){return new \WP_Error("not_validated","No status message found! - Not Validated");}if($yjj_____________H['status']['status']=='validated'){self::updateProAuth($yjj_____________H['email'],$yjj_____________H['key'],@$yjj_____________H['status']['level']);return $userMeta->isPro()?'Pro version already validated. Credentials updated!':'License successfully validated';}elseif($yjj_____________H['status']['status']=='license_withdrawn'){if(!$userMeta->isPro()){return "No license found to withdraw";}else{if($userMeta->updateData('pro_auth',null,true)){return "License has been withdrawn";}}}return new \WP_Error("not_validated","Something went wrong - Not Validated");}function generateProUrl($icc__________________v,$ztt________________h=null,$iHH______k=null,$boo___________2=null){global $userMeta;if(!$iHH______k||!$boo___________2){$yjj_____________H=self::getProAuth();$iHH______k=@$yjj_____________H['key'];$boo___________2=@$yjj_____________H['email'];if(!@$yjj_____________H['valid'])return false;}$zII__________________r=$userMeta->website."/remote-download/";$nWW_________________i=self::generateProKey($boo___________2,$iHH______k);$kdd______________Y=self::generateProKey($boo___________2,time());$wuu______________G=network_site_url();$zII__________________r.="?action=$icc__________________v&email=$boo___________2&key=$nWW_________________i&key2=$kdd______________Y&site=$wuu______________G";if($ztt________________h){$zII__________________r.="&prev_version=$userMeta->version&version=$ztt________________h";}return $zII__________________r;}function isLicenceValidated(){$yjj_____________H=self::getProAuth();return!empty($yjj_____________H['valid'])?true:false;}function updateProAccountSettings($eGG____________________F){global $userMeta;if(empty($eGG____________________F['account_email'])||empty($eGG____________________F['account_pass']))return false;$gcc_______4=$eGG____________________F['account_email'];$boo___________2=base64_encode($eGG____________________F['account_pass']);$uhh_____________H=$userMeta->isPro()?'cred_update':'activate';$thh________________e=self::xmlRpcValidation($gcc_______4,$boo___________2,$uhh_____________H);if(is_wp_error($thh________________e)){return $userMeta->printAjaxOutput($userMeta->showError($thh________________e));}if(isset($thh________________e['status'])&&$thh________________e['status']=='validated'){self::updateProAuth($gcc_______4,$boo___________2,@$thh________________e['level']);if($uhh_____________H=='activate'){echo $userMeta->showMessage('License successfully validated');if(!$userMeta->isPro){$mQQ______M='Redirecting for upgrading to Pro version... ';$mQQ______M.="<br />".'if not redirecting,'." <a href='".$userMeta->pluginUpdateUrl()."'>".'click here for upgrading to Pro version'."</a>";echo $userMeta->showMessage($mQQ______M);echo $userMeta->jsRedirect($userMeta->pluginUpdateUrl());}else{echo $userMeta->jsRedirect($userMeta->adminPageUrl('settings',false));}}else{echo $userMeta->showMessage('Credentials updated');}}else{echo $userMeta->showError('Something went wrong!');}die();}private function getProAuth(){global $userMeta;$yjj_____________H=$userMeta->getData('pro_auth',true);if(!empty($yjj_____________H['email'])&&!empty($yjj_____________H['status'])){if(self::generateValidationKey($yjj_____________H['email'])==$yjj_____________H['status'])$yjj_____________H['valid']=true;}return $yjj_____________H;}private function updateProAuth($gcc_______4,$boo___________2,$cSS_______q='single'){global $userMeta;$yjj_____________H=array('email'=>$gcc_______4,'key'=>$boo___________2,'status'=>self::generateValidationKey($gcc_______4),'level'=>$cSS_______q,'version'=>$userMeta->version,'last_checked'=>time());return $userMeta->updateData('pro_auth',$yjj_____________H,true);}function withdrawLicense(){global $userMeta;$userMeta->verifyNonce();if(!is_super_admin()){if(is_multisite()){return new \WP_Error('not_admin','Super admin account is needed to withdraw the pro license from network');}else{return new \WP_Error('not_admin','An admin account is needed to withdraw the pro license');}}$yjj_____________H=$userMeta->getData('pro_auth',true);if(empty($yjj_____________H['email'])||empty($yjj_____________H['key']))return new \WP_Error('email_blank','Please update your email and password before withdraw the pro license');$aNN________H=self::xmlRpcValidation($yjj_____________H['email'],$yjj_____________H['key'],'license_withdrawn');if(is_wp_error($aNN________H))return $aNN________H;if(isset($aNN________H['status'])&&$aNN________H['status']=='validated')return $userMeta->updateData('pro_auth',null,true);return false;}function notifyVersionUpdate(){global $userMeta;$yjj_____________H=$userMeta->getData('pro_auth',true);if(!empty($yjj_____________H['email'])&&!empty($yjj_____________H['key']))self::xmlRpcValidation($yjj_____________H['email'],$yjj_____________H['key'],'version_update');}function validateUMPKey(){global $userMeta;if(!(isset($_REQUEST['ump_license_validation'])||(isset($_REQUEST['action'])&&$_REQUEST['action']=='ump_license_validation')))return;if(!isset($_GET['email'])||!isset($_GET['key'])||!isset($_GET['stamp'])){echo "<h3>Invalid Argument</h3>";return;}if(!$userMeta->isAdmin()){echo "<h3>Please login with an admin account.</h3>";return;}$gcc_______4=$_GET['email'];$boo___________2=$_GET['key'];$fQQ_________________u=$_GET['stamp'];$cSS_______q=$_GET['level'];if(!$userMeta->verifyTimeNonce($fQQ_________________u)){echo "<h3>License key expired! Please generate license key again.</h3>";return;}$vFF________d=$userMeta->prepareUrl(network_site_url());$off_______F=self::generateCustomNonce($gcc_______4,$vFF________d);if($boo___________2!=$off_______F){echo "<h3>Invalid License Key!</h3>";return;}$zaa_____________d=self::updateProAuth($gcc_______4,$boo___________2,$cSS_______q);if($zaa_____________d){echo "<h3>Validation Successfull!</h3>";}else{echo "<h3>Something went wrong while validating!</h3>";}return;}function activateLicenseNotice(){global $userMeta;if($userMeta->isPro){if(!$userMeta->isPro()){echo $userMeta->showError(sprintf(__('Please enter your license information to <a href="%s">activate User Meta Pro</a>.',$userMeta->name),admin_url("admin.php?page=user-meta-settings#um_activation_form")));}}}function checkForUpdate($jEE__________K){global $userMeta;if(empty($jEE__________K->checked))return $jEE__________K;include_once(ABSPATH.'wp-includes/class-IXR.php');$pAA_______________Z=new \IXR_Client($userMeta->website.'/xmlrpc.php');$s22________________o=$pAA_______________Z->query('ump.checkUpdate','latest_version')?$pAA_______________Z->getResponse():0;if(version_compare($userMeta->version,$s22________________o,'<')){$mqq_______________M=explode('/',$userMeta->pluginSlug);$tII________v=new \stdClass();$tII________v->slug=str_replace('.php','',$mqq_______________M[1]);$tII________v->plugin=$userMeta->pluginSlug;$tII________v->new_version=$s22________________o;$tII________v->url=$userMeta->website;$tII________v->package=$this->generateProUrl('download',$s22________________o);$jEE__________K->response[$userMeta->pluginSlug]=$tII________v;}else
            unset($jEE__________K->response[$userMeta->pluginSlug]);return $jEE__________K;}function loadProControllers($oZZ_______7,$tHH_____________x){global $userMeta;if($userMeta->isPro()){$oLL_____s=$tHH_____________x.'pro/';if(file_exists($oLL_____s)){foreach(scandir($oLL_____s)as $eoo__________________o){if(preg_match("/.php$/i",$eoo__________________o)){$oZZ_______7[str_replace(".php","",$eoo__________________o)]=$oLL_____s.$eoo__________________o;}}}}return $oZZ_______7;}function locateProView($aqq_________d){global $userMeta;if($userMeta->isPro()){foreach($userMeta->extensions as $fRR_________o=>$ott___________________F){$aqq_________d[]=$ott___________________F.'/views/pro/';}$aqq_________d[]=$userMeta->viewsPath.'pro/';}return $aqq_________d;}function proLoaded(){add_action('init',function(){do_action('user_meta_pro_loaded');});}function upgrade_to_1_1_3(){global $userMeta;$yjj_____________H=$userMeta->getData('pro_auth');if(empty($yjj_____________H['email'])||empty($yjj_____________H['key'])||empty($yjj_____________H['status'])){return false;}if($yjj_____________H['status']=='validated'){return self::updateProAuth($yjj_____________H['email'],$yjj_____________H['key']);}return false;}function upgrade_to_1_1_5(){global $userMeta;if(is_multisite()){$eGG____________________F=$userMeta->getData('pro_auth',true);if(empty($eGG____________________F)){$eGG____________________F=get_option('user_meta_pro_auth');if(!empty($eGG____________________F)){$userMeta->updateData('pro_auth',$eGG____________________F,true);}}}$eGG____________________F=$userMeta->getData('pro_auth',true);if(!empty($eGG____________________F['email'])&&!empty($eGG____________________F['status'])){$eGG____________________F['status']=self::generateValidationKey($eGG____________________F['email']);$userMeta->updateData('pro_auth',$eGG____________________F,true);}}}